{"ast":null,"code":"import _classCallCheck from \"/Users/rromain/Desktop/Griffith/Web Technologies/project/task-manager-mean-stack/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rromain/Desktop/Griffith/Web Technologies/project/task-manager-mean-stack/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, empty, Subject } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { catchError, tap, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport var WebReqInterceptor = /*#__PURE__*/(function () {\n  var WebReqInterceptor = /*#__PURE__*/function () {\n    function WebReqInterceptor(authService) {\n      _classCallCheck(this, WebReqInterceptor);\n\n      this.authService = authService;\n      this.accessTokenRefreshed = new Subject();\n    }\n\n    _createClass(WebReqInterceptor, [{\n      key: \"intercept\",\n      value: function intercept(request, next) {\n        var _this = this;\n\n        // Handle the request\n        request = this.addAuthHeader(request); // call next() and handle the response\n\n        return next.handle(request).pipe(catchError(function (error) {\n          console.log(error);\n\n          if (error.status === 401) {\n            // 401 error so we are unauthorized\n            // refresh the access token\n            return _this.refreshAccessToken().pipe(switchMap(function () {\n              request = _this.addAuthHeader(request);\n              return next.handle(request);\n            }), catchError(function (err) {\n              console.log(err);\n\n              _this.authService.logout();\n\n              return empty();\n            }));\n          }\n\n          return throwError(error);\n        }));\n      }\n    }, {\n      key: \"refreshAccessToken\",\n      value: function refreshAccessToken() {\n        var _this2 = this;\n\n        if (this.refreshingAccessToken) {\n          return new Observable(function (observer) {\n            _this2.accessTokenRefreshed.subscribe(function () {\n              // this code will run when the access token has been refreshed\n              observer.next();\n              observer.complete();\n            });\n          });\n        } else {\n          this.refreshingAccessToken = true; // we want to call a method in the auth service to send a request to refresh the access token\n\n          return this.authService.getNewAccessToken().pipe(tap(function () {\n            console.log(\"Access Token Refreshed!\");\n            _this2.refreshingAccessToken = false;\n\n            _this2.accessTokenRefreshed.next();\n          }));\n        }\n      }\n    }, {\n      key: \"addAuthHeader\",\n      value: function addAuthHeader(request) {\n        // get the access token\n        var token = this.authService.getAccessToken();\n\n        if (token) {\n          // append the access token to the request header\n          return request.clone({\n            setHeaders: {\n              'x-access-token': token\n            }\n          });\n        }\n\n        return request;\n      }\n    }]);\n\n    return WebReqInterceptor;\n  }();\n\n  WebReqInterceptor.ɵfac = function WebReqInterceptor_Factory(t) {\n    return new (t || WebReqInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  WebReqInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebReqInterceptor,\n    factory: WebReqInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return WebReqInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}