{"ast":null,"code":"import _classCallCheck from \"/Users/rromain/Desktop/Griffith/Web Technologies/project/task-manager-mean-stack/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rromain/Desktop/Griffith/Web Technologies/project/task-manager-mean-stack/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { WebRequestService } from './web-request.service';\nimport { Router } from '@angular/router';\nimport { shareReplay, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./web-request.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nexport var AuthService = /*#__PURE__*/(function () {\n  var AuthService = /*#__PURE__*/function () {\n    function AuthService(webService, router, http) {\n      _classCallCheck(this, AuthService);\n\n      this.webService = webService;\n      this.router = router;\n      this.http = http;\n    }\n\n    _createClass(AuthService, [{\n      key: \"login\",\n      value: function login(email, password) {\n        var _this = this;\n\n        return this.webService.login(email, password).pipe(shareReplay(), tap(function (res) {\n          // the auth tokens will be in the header of this response\n          _this.setSession(res.body._id, res.headers.get('x-access-token'), res.headers.get('x-refresh-token'));\n\n          console.log(\"LOGGED IN!\");\n        }));\n      }\n    }, {\n      key: \"signup\",\n      value: function signup(email, password) {\n        var _this2 = this;\n\n        return this.webService.signup(email, password).pipe(shareReplay(), tap(function (res) {\n          // the auth tokens will be in the header of this response\n          _this2.setSession(res.body._id, res.headers.get('x-access-token'), res.headers.get('x-refresh-token'));\n\n          console.log(\"Successfully signed up and now logged in!\");\n        }));\n      }\n    }, {\n      key: \"logout\",\n      value: function logout() {\n        this.removeSession();\n        this.router.navigate(['/login']);\n      }\n    }, {\n      key: \"getAccessToken\",\n      value: function getAccessToken() {\n        return localStorage.getItem('x-access-token');\n      }\n    }, {\n      key: \"getRefreshToken\",\n      value: function getRefreshToken() {\n        return localStorage.getItem('x-refresh-token');\n      }\n    }, {\n      key: \"getUserId\",\n      value: function getUserId() {\n        return localStorage.getItem('user-id');\n      }\n    }, {\n      key: \"setAccessToken\",\n      value: function setAccessToken(accessToken) {\n        localStorage.setItem('x-access-token', accessToken);\n      }\n    }, {\n      key: \"setSession\",\n      value: function setSession(userId, accessToken, refreshToken) {\n        localStorage.setItem('user-id', userId);\n        localStorage.setItem('x-access-token', accessToken);\n        localStorage.setItem('x-refresh-token', refreshToken);\n      }\n    }, {\n      key: \"removeSession\",\n      value: function removeSession() {\n        localStorage.removeItem('user-id');\n        localStorage.removeItem('x-access-token');\n        localStorage.removeItem('x-refresh-token');\n      }\n    }, {\n      key: \"getNewAccessToken\",\n      value: function getNewAccessToken() {\n        var _this3 = this;\n\n        return this.http.get(\"\".concat(this.webService.ROOT_URL, \"/users/me/access-token\"), {\n          headers: {\n            'x-refresh-token': this.getRefreshToken(),\n            '_id': this.getUserId()\n          },\n          observe: 'response'\n        }).pipe(tap(function (res) {\n          _this3.setAccessToken(res.headers.get('x-access-token'));\n        }));\n      }\n    }]);\n\n    return AuthService;\n  }();\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.WebRequestService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}